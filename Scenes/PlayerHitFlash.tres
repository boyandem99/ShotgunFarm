[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://b21meck7jugbv"]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_hkpt0"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_4tt8r"]
parameter_name = "ColorParameter"
default_value_enabled = true
default_value = Color(0.815686, 0, 0, 1)

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_lsk4u"]
parameter_name = "enabled"
default_value_enabled = true

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gdv0b"]
input_name = "color"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool enabled = false;
uniform vec4 ColorParameter : source_color = vec4(0.815686, 0.000000, 0.000000, 1.000000);



void fragment() {
// BooleanParameter:4
	bool n_out4p0 = enabled;


// ColorParameter:3
	vec4 n_out3p0 = ColorParameter;


// Input:5
	vec4 n_out5p0 = COLOR;


	vec3 n_out2p0;
// If:2
	float n_in2p1 = 0.00000;
	float n_in2p2 = 0.00001;
	if(abs((n_out4p0 ? 1.0 : 0.0) - n_in2p1) < n_in2p2)
	{
		n_out2p0 = vec3(n_out3p0.xyz);
	}
	else if((n_out4p0 ? 1.0 : 0.0) < n_in2p1)
	{
		n_out2p0 = vec3(n_out5p0.xyz);
	}
	else
	{
		n_out2p0 = vec3(n_out5p0.xyz);
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 240)
nodes/fragment/2/node = SubResource("VisualShaderNodeIf_hkpt0")
nodes/fragment/2/position = Vector2(460, 260)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorParameter_4tt8r")
nodes/fragment/3/position = Vector2(100, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeBooleanParameter_lsk4u")
nodes/fragment/4/position = Vector2(160, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_gdv0b")
nodes/fragment/5/position = Vector2(60, 460)
nodes/fragment/connections = PackedInt32Array(5, 0, 2, 4, 5, 0, 2, 5, 4, 0, 2, 0, 2, 0, 0, 0, 3, 0, 2, 3)
